# -*- mode: ruby -*-
# vi: set ft=ruby :

# server configuration
vm_ip_address = "192.168.123.45"
vm_naked_hostname = "vagrant-cfml.local"
vm_www_hostname = "www.#{vm_naked_hostname}"
vm_sql_hostname = "db.#{vm_naked_hostname}"
vm_timezone  = "US/Eastern"
vm_current_version = "v1.0.0"
vm_name = "Vagrant-CFML-#{vm_current_version}"
vm_max_memory = 2048
vm_num_cpus = 1
vm_max_host_cpu_cap = "50"
vm_ubuntu_version_string = "trusty" # "trusty" (14.04)

# database configuration
db_server_type = "mariadb" # "mariadb"
db_mariadb_version = "10.1"
db_root_password = "password"
db_create_database_name = "cfartgallery"
db_sql_file_to_import = "data/cfartgallery.sql"

# synced folder configuration
synced_webroot_local = "../webroot"
synced_webroot_box = "/var/www/html"

Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/#{vm_ubuntu_version_string}64"
  config.vm.box_url = "https://cloud-images.ubuntu.com/vagrant/#{vm_ubuntu_version_string}/current/#{vm_ubuntu_version_string}-server-cloudimg-amd64-vagrant-disk1.box"
  config.vm.boot_timeout = 180
  config.vm.network :private_network, ip: vm_ip_address, auto_correct: true
  config.vm.synced_folder synced_webroot_local, synced_webroot_box, :nfs => { :mount_options => ["dmode=777","fmode=666"] }

  config.vm.provider "virtualbox" do |v|
    # set name of vm
    v.name = vm_name
    # no matter how much cpu is used in vm, use no more than vm_max_host_cpu_cap amount
    v.customize ["modifyvm", :id, "--cpuexecutioncap", vm_max_host_cpu_cap]
    # set max amount of host machine ram allotted for vm to use
    v.customize ["modifyvm", :id, "--memory", vm_max_memory]
    # set number of cpus from host machine that vm is allowed to use
    v.customize ["modifyvm", :id, "--cpus", vm_num_cpus]
    # the next two settings enable using the host computer's dns inside the vagrant box
    # enable dns proxy in nat mode
    v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
    # use the host's resolver as a dns proxy in nat mode
    v.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
  end

  if defined?(VagrantPlugins::HostsUpdater)
    # set vm hostname
    config.vm.hostname = vm_naked_hostname
    config.hostsupdater.aliases = [
      vm_www_hostname, vm_sql_hostname
    ]
  end

  # fix the annoying 'stdin: is not a tty' error messages
  config.vm.provision "fix-no-tty", type: "shell" do |s|
    s.privileged = false
    s.inline = "sudo sed -i '/tty/!s/mesg n/tty -s \\&\\& mesg n/' /root/.profile"
  end

  # set vm timezone and do some cleanup before installations
  config.vm.provision :shell, :path => "bash-scripts/step-1-set-vm-timezone.sh", :privileged => true, :args => vm_timezone

  # install miscellaneous utilities
  config.vm.provision :shell, :path => "bash-scripts/step-2-install-utilities.sh", :privileged => true

  # install apache 
  config.vm.provision :shell, :path => "bash-scripts/step-3-install-apache.sh", :privileged => true

  # install lucee
  config.vm.provision :shell, :path => "bash-scripts/step-4-install-lucee.sh", :privileged => true

  # install/configure mariadb
  config.vm.provision :shell, :path => "bash-scripts/step-5-install-#{db_server_type}.sh", :privileged => true, :args => [
    db_root_password, db_sql_file_to_import, db_create_database_name, db_mariadb_version, vm_ubuntu_version_string
  ]

  # confirm setup is complete and output connection info
  config.vm.provision :shell, :path => "bash-scripts/step-6-final-output.sh", :privileged => true, :args => [
    vm_name, vm_www_hostname, vm_ip_address, vm_sql_hostname
  ]
end
